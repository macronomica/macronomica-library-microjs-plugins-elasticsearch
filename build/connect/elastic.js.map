{"version":3,"sources":["../../src/connect/elastic.js"],"names":["micro","plugin","es","TypeError","join","has","get","host","log","maxSockets","requestTimeout","agent","other","client","Client","createNodeAgent","ping","then","logger","info","id","payload","catch","error","Promise","reject"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AASA;;;;;;kBAMe,UAACA,KAAD,EAAQC,MAAR,EAAoD;AAAA,iFAAP,EAAO;AAAA,qBAAlCC,EAAkC;AAAA,MAAlCA,EAAkC;;AACjE,MAAI,CAAC,sBAASA,EAAT,CAAD,IAAiB,CAAC,sBAAcA,EAAd,CAAtB,EAAyC;AACvC,UAAM,IAAIC,SAAJ,CAAc,CAClB,6DADkB,EAElB,oDAFkB,EAGlB,yJAHkB,EAIlBC,IAJkB,CAIb,IAJa,CAAd,CAAN;AAKD;;AAPgE,cAgB7D,sBAAcF,EAAd,IAAoBA,EAApB,GAAyB,iBAAOG,GAAP,CAAWH,EAAX,IAAiB,iBAAOI,GAAP,CAAWJ,EAAX,CAAjB,GAAkC,EAhBE;AAAA,yBAU/DK,IAV+D;AAAA,MAU/DA,IAV+D;AAAA,wBAW/DC,GAX+D;AAAA,MAW/DA,GAX+D;AAAA,+BAY/DC,UAZ+D;AAAA,MAY/DA,UAZ+D;AAAA,mCAa/DC,cAb+D;AAAA,MAa/DA,cAb+D;AAAA,0BAc/DC,KAd+D;AAAA,MAc/DA,KAd+D;AAAA,MAe5DC,KAf4D;;AAkBjE,MAAMC,SAAS,IAAI,wBAAcC,MAAlB;AACbP,cADa,EACPC,QADO,EACFE,8BADE,EACcD,sBADd;AAEbM,qBAAiB;AAAA,aAAM,qBAAMJ,KAAN,CAAN;AAAA;AAFJ,KAGVC,KAHU,EAAf;;AAMA,SAAOC,OACJG,IADI,GAEJC,IAFI,CAEC,YAAM;AACVjB,UAAMkB,MAAN,CAAaC,IAAb,wIAA0D;AACxDC,UAAMnB,OAAOmB,EAD2C;AAExDC;AACEd,kBADF;AAEEC,gBAFF;AAGEC,8BAHF;AAIEC,sCAJF;AAKEC;AALF,SAMKC,KANL;AAFwD,KAA1D;;AAYA,WAAOC,MAAP;AACD,GAhBI,EAiBJS,KAjBI,CAiBE,iBAAS;AACdtB,UAAMkB,MAAN,CAAaK,KAAb,kIAA0D;AACxDH,UAAMnB,OAAOmB,EAD2C;AAExDC;AACEd,kBADF;AAEEC,gBAFF;AAGEC,8BAHF;AAIEC,sCAJF;AAKEC;AALF,SAMKC,KANL;AAFwD,KAA1D;;AAYA,WAAOY,QAAQC,MAAR,CAAeF,KAAf,CAAP;AACD,GA/BI,CAAP;AAgCD,C","file":"elastic.js","sourcesContent":["import config from 'config';\nimport elasticsearch from 'elasticsearch';\nimport isString from 'lodash.isstring';\nimport isPlainObject from 'lodash.isplainobject';\nimport Agent from './agent';\nimport {\n  CONFIG_SECTION_ES,\n  CONFIG_SECTION_AGENT,\n  ES_HOST,\n  ES_LOG,\n  ES_REQUEST_TIMEOUT,\n  ES_MAX_SOCKETS,\n} from '../constants';\n\n/**\n * @param {object} micro\n * @param {object} plugin\n * @param {string|object} [es]=CONFIG_SECTION_ES\n * @returns {*}\n */\nexport default (micro, plugin, { es = CONFIG_SECTION_ES } = {}) => {\n  if (!isString(es) && !isPlainObject(es)) {\n    throw new TypeError([\n      'Настройки для соединения с ElasticSearch могут быть только:',\n      '- {string} -> название имени ключа из конфигурации',\n      '- {object} -> объектом с настройками @see https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/configuration.html#config-options',\n    ].join('\\n'))\n  }\n\n  const {\n    host = ES_HOST,\n    log = ES_LOG,\n    maxSockets = ES_MAX_SOCKETS,\n    requestTimeout = ES_REQUEST_TIMEOUT,\n    agent = CONFIG_SECTION_AGENT,\n    ...other\n  } = isPlainObject(es) ? es : config.has(es) ? config.get(es) : {};\n\n  const client = new elasticsearch.Client({\n    host, log, requestTimeout, maxSockets,\n    createNodeAgent: () => Agent(agent),\n    ...other\n  });\n\n  return client\n    .ping()\n    .then(() => {\n      micro.logger.info(`Создано подключение к ElasticSearch:`, {\n        id  : plugin.id,\n        payload: {\n          host,\n          log,\n          maxSockets,\n          requestTimeout,\n          agent,\n          ...other\n        }\n      });\n\n      return client;\n    })\n    .catch(error => {\n      micro.logger.error(`Ошибка подключения к ElasticSearch:`, {\n        id  : plugin.id,\n        payload: {\n          host,\n          log,\n          maxSockets,\n          requestTimeout,\n          agent,\n          ...other\n        }\n      });\n\n      return Promise.reject(error);\n    });\n}"]}